/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result=new ArrayList<Integer>();
        inorder(root,result);
        return result;
    }

    public void inorder(TreeNode root,List<Integer> result)
    {
        if(root==null)
        {
            return;
        }
        inorder(root.left,result);
        result.add(root.val);
        inorder(root.right,result);
    }
    public class BuildTree{
        int index=-1;
        public TreeNode Build(int[] nodes)
        {
            index++;
            if(nodes[index]==-1)
            {
                return null;
            }
            TreeNode newNode=new TreeNode(nodes[index]);
            newNode.left=Build(nodes);
            newNode.right=Build(nodes);

            return newNode;
        }
    }
}
